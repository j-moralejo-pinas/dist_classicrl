name: Configure repository

on:
  workflow_dispatch: {}

jobs:
  apply:
    environment: main
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Core repo settings
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          REPO_NEW_NAME: dist_classicrl
          REPO_DESC: This library contains a distributed implementation of classical q-learning. It may contain more implementations in the future.
          REPO_WEB: ""
          REPO_TOPICS_JSON: '[]'
        run: |
          # Rename, metadata, switches
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            "/repos/$GITHUB_REPOSITORY" \
            -f "name=$REPO_NEW_NAME" \
            -f "description=$REPO_DESC" \
            -f "homepage=$REPO_WEB" \
            -F "has_wiki=false" \
            -F "has_issues=true" \
            -F "has_projects=true" \
            -F "has_discussions=false" \
            -F "allow_merge_commit=true" \
            -F "allow_rebase_merge=true" \
            -F "allow_squash_merge=true" \
            -F "allow_auto_merge=true" \
            -F "allow_update_branch=true" \
            -F "delete_branch_on_merge=true" \
            -F "default_branch=main"

          # NEW: refresh slug in case of rename
          REPO_SLUG=$(gh api "/repos/$GITHUB_REPOSITORY" -H "Accept: application/vnd.github+json" -q .full_name)
          echo "REPO_SLUG=$REPO_SLUG" >> "$GITHUB_ENV"

          # Topics (use refreshed slug)
          printf '{"names": %s}\n' "$REPO_TOPICS_JSON" > /tmp/topics.json
          gh api --method PUT -H "Accept: application/vnd.github+json" \
            "/repos/$REPO_SLUG/topics" --input /tmp/topics.json

      # 2) Use the refreshed slug in later steps
      - name: Actions and workflow permissions
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          gh api -X PUT "/repos/$REPO_SLUG/actions/permissions" \
            -f enabled=true -f allowed_actions=all
          gh api -X PUT "/repos/$REPO_SLUG/actions/permissions/workflow" \
            -f default_workflow_permissions=write \
            -F can_approve_pull_request_reviews=false

      # 3) Fix devnull typo and use refreshed slug
      - name: Create or update rulesets
        env:
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          find_ruleset_id_by_name() {
            local NAME="$1"
            gh api "/repos/$REPO_SLUG/rulesets" | jq -r ".[] | select(.name==\"$NAME\") | .id" | head -n1
          }
          upsert_ruleset() {
            local NAME="$1"; local BRANCH="$2"; local ALLOWED_MERGES_JSON="$3"; local REQUIRED_CHECKS_JSON="$4"
            RULES=$(jq -n --argjson allowed "$ALLOWED_MERGES_JSON" --argjson checks "$REQUIRED_CHECKS_JSON" '
              [
                { "type": "deletion" },
                { "type": "pull_request",
                  "parameters": {
                    "dismiss_stale_reviews_on_push": false,
                    "require_code_owner_review": true,
                    "required_approving_review_count": 1,
                    "allowed_merge_methods": $allowed
                  }
                },
                { "type": "required_status_checks",
                  "parameters": {
                    "strict_required_status_checks": true,
                    "required_status_checks": ($checks | map({context: .}))
                  }
                },
                { "type": "non_fast_forward" }
              ]')
            BODY=$(jq -n --arg name "$NAME" --arg branch "refs/heads/$BRANCH" --argjson rules "$RULES" '
              { name: $name, target: "branch", enforcement: "active",
                conditions: { ref_name: { include: [$branch], exclude: [] } }, rules: $rules }')
            ID=$(find_ruleset_id_by_name "$NAME" || true)
            if [ -n "${ID:-}" ]; then
              gh api -X PATCH "/repos/$REPO_SLUG/rulesets/$ID" -H "Accept: application/vnd.github+json" \
                --input <(printf '%s' "$BODY") >/dev/null
            else
              gh api -X POST "/repos/$REPO_SLUG/rulesets" -H "Accept: application/vnd.github+json" \
                --input <(printf '%s' "$BODY") >/dev/null   # fixed
            fi
          }
          upsert_ruleset "Main" "main" "$(jq -n '["merge"]')" \
            "$(jq -n '["check-source-branch","format","code-quality","test"]')"
          upsert_ruleset "Dev" "dev" "$(jq -n '["merge","squash"]')" \
            "$(jq -n '["format","test"]')"